#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// nl.b3p.brmo.loader.RsgbProxy
	c1284 [label=<<table title="nl.b3p.brmo.loader.RsgbProxy" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../RsgbProxy.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RsgbProxy </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RsgbProxy(dataSourceRsgb : DataSource, stagingProxy : StagingProxy, status : Bericht.STATUS, listener : ProgressUpdateListener) </td></tr>
<tr><td align="left" balign="left"> + RsgbProxy(dataSourceRsgb : DataSource, stagingProxy : StagingProxy, mode : RsgbProxy.BerichtSelectMode, ids : long[], listener : ProgressUpdateListener) </td></tr>
<tr><td align="left" balign="left"> + RsgbProxy(dataSourceRsgb : DataSource, stagingProxy : StagingProxy, updateProcess : UpdateProcess, listener : ProgressUpdateListener) </td></tr>
<tr><td align="left" balign="left"> + setSimonNamePrefix(prefix : String) </td></tr>
<tr><td align="left" balign="left"> + setEnablePipeline(enablePipeline : boolean) </td></tr>
<tr><td align="left" balign="left"> + setPipelineCapacity(pipelineCapacity : int) </td></tr>
<tr><td align="left" balign="left"> + setRenewConnectionAfterCommit(renewConnectionAfterCommit : boolean) </td></tr>
<tr><td align="left" balign="left"> + setOrderBerichten(orderBerichten : boolean) </td></tr>
<tr><td align="left" balign="left"> + setErrorState(errorState : String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + checkAndCloseStatement(stmt : PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + checkAndAddStatement(m : Map&lt;String, PreparedStatement&gt;, tableName : String, stmt : PreparedStatement) </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + renewConnection() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> + updateProcessingResult(ber : Bericht) </td></tr>
<tr><td align="left" balign="left"> + transformToTableData(ber : Bericht) : List&lt;TableData&gt; </td></tr>
<tr><td align="left" balign="left"> + transformUpdateTableData(ber : Bericht) : List&lt;TableData&gt; </td></tr>
<tr><td align="left" balign="left"> + updateBerichtException(ber : Bericht, e : Throwable) </td></tr>
<tr><td align="left" balign="left"> + updateBerichtProcessing(ber : Bericht) </td></tr>
<tr><td align="left" balign="left"> + handle(ber : Bericht, pretransformedTableData : List&lt;TableData&gt;, updateResult : boolean) </td></tr>
<tr><td align="left" balign="left"> + update(ber : Bericht, pretransformedTableData : List&lt;TableData&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAlreadyInMetadata(row : TableRow, loadLog : StringBuilder) : boolean </td></tr>
<tr><td align="left" balign="left"> + getHerkomstMetadata() : String </td></tr>
<tr><td align="left" balign="left"> + setHerkomstMetadata(herkomstMetadata : String) </td></tr>
		</table></td></tr>
		</table>>, URL="../RsgbProxy.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// nl.b3p.brmo.loader.util.DataComfortXMLReader
	c1301 [label=<<table title="nl.b3p.brmo.loader.util.DataComfortXMLReader" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./DataComfortXMLReader.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DataComfortXMLReader </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DataComfortXMLReader() </td></tr>
<tr><td align="left" balign="left"> + readDataXML(dataXML : Source) : List&lt;TableData&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./DataComfortXMLReader.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// nl.b3p.brmo.loader.RsgbProxy NAVASSOC nl.b3p.brmo.loader.util.DataComfortXMLReader
	c1284:p -> c1301:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// nl.b3p.brmo.loader.RsgbProxy NAVASSOC nl.b3p.brmo.loader.util.DataComfortXMLReader
	c1284:p -> c1301:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// nl.b3p.brmo.loader.util.DataComfortXMLReader NAVASSOC com.vividsolutions.jts.geom.GeometryFactory
	c1301:p -> c1330:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// com.vividsolutions.jts.geom.GeometryFactory
	c1330 [label=<<table title="com.vividsolutions.jts.geom.GeometryFactory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/vividsolutions/jts/geom/GeometryFactory.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GeometryFactory </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GeometryFactory(arg0 : PrecisionModel, arg1 : int, arg2 : CoordinateSequenceFactory) </td></tr>
<tr><td align="left" balign="left"> + GeometryFactory(arg0 : CoordinateSequenceFactory) </td></tr>
<tr><td align="left" balign="left"> + GeometryFactory(arg0 : PrecisionModel) </td></tr>
<tr><td align="left" balign="left"> + GeometryFactory(arg0 : PrecisionModel, arg1 : int) </td></tr>
<tr><td align="left" balign="left"> + GeometryFactory() </td></tr>
<tr><td align="left" balign="left"> + createPointFromInternalCoord(arg0 : Coordinate, arg1 : Geometry) : Point </td></tr>
<tr><td align="left" balign="left"> + toPointArray(arg0 : Collection&lt;&gt;) : Point[] </td></tr>
<tr><td align="left" balign="left"> + toGeometryArray(arg0 : Collection&lt;&gt;) : Geometry[] </td></tr>
<tr><td align="left" balign="left"> + toLinearRingArray(arg0 : Collection&lt;&gt;) : LinearRing[] </td></tr>
<tr><td align="left" balign="left"> + toLineStringArray(arg0 : Collection&lt;&gt;) : LineString[] </td></tr>
<tr><td align="left" balign="left"> + toPolygonArray(arg0 : Collection&lt;&gt;) : Polygon[] </td></tr>
<tr><td align="left" balign="left"> + toMultiPolygonArray(arg0 : Collection&lt;&gt;) : MultiPolygon[] </td></tr>
<tr><td align="left" balign="left"> + toMultiLineStringArray(arg0 : Collection&lt;&gt;) : MultiLineString[] </td></tr>
<tr><td align="left" balign="left"> + toMultiPointArray(arg0 : Collection&lt;&gt;) : MultiPoint[] </td></tr>
<tr><td align="left" balign="left"> + toGeometry(arg0 : Envelope) : Geometry </td></tr>
<tr><td align="left" balign="left"> + getPrecisionModel() : PrecisionModel </td></tr>
<tr><td align="left" balign="left"> + createPoint(arg0 : Coordinate) : Point </td></tr>
<tr><td align="left" balign="left"> + createPoint(arg0 : CoordinateSequence) : Point </td></tr>
<tr><td align="left" balign="left"> + createMultiLineString(arg0 : LineString[]) : MultiLineString </td></tr>
<tr><td align="left" balign="left"> + createGeometryCollection(arg0 : Geometry[]) : GeometryCollection </td></tr>
<tr><td align="left" balign="left"> + createMultiPolygon(arg0 : Polygon[]) : MultiPolygon </td></tr>
<tr><td align="left" balign="left"> + createLinearRing(arg0 : Coordinate[]) : LinearRing </td></tr>
<tr><td align="left" balign="left"> + createLinearRing(arg0 : CoordinateSequence) : LinearRing </td></tr>
<tr><td align="left" balign="left"> + createMultiPoint(arg0 : Point[]) : MultiPoint </td></tr>
<tr><td align="left" balign="left"> + createMultiPoint(arg0 : Coordinate[]) : MultiPoint </td></tr>
<tr><td align="left" balign="left"> + createMultiPoint(arg0 : CoordinateSequence) : MultiPoint </td></tr>
<tr><td align="left" balign="left"> + createPolygon(arg0 : LinearRing, arg1 : LinearRing[]) : Polygon </td></tr>
<tr><td align="left" balign="left"> + createPolygon(arg0 : CoordinateSequence) : Polygon </td></tr>
<tr><td align="left" balign="left"> + createPolygon(arg0 : Coordinate[]) : Polygon </td></tr>
<tr><td align="left" balign="left"> + createPolygon(arg0 : LinearRing) : Polygon </td></tr>
<tr><td align="left" balign="left"> + buildGeometry(arg0 : Collection&lt;&gt;) : Geometry </td></tr>
<tr><td align="left" balign="left"> + createLineString(arg0 : Coordinate[]) : LineString </td></tr>
<tr><td align="left" balign="left"> + createLineString(arg0 : CoordinateSequence) : LineString </td></tr>
<tr><td align="left" balign="left"> + createGeometry(arg0 : Geometry) : Geometry </td></tr>
<tr><td align="left" balign="left"> + getSRID() : int </td></tr>
<tr><td align="left" balign="left"> + getCoordinateSequenceFactory() : CoordinateSequenceFactory </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/com/vividsolutions/jts/geom/GeometryFactory.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

