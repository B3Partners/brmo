language: java
os: linux
dist: xenial
env:
  global:
    - MVN_VERSION="3.6.3"
    - MVN_ARGS="-Dit.test=!TopNLIntegrationTest"
    - MAVEN_OPTS=-Djava.awt.headless=true -Xms8G -Xmx12G
    - PGPORT=5432
    - PGUSER=postgres
    - PGDATABASE=postgres
    - PGOPTIONS='-c client_min_messages=NOTICE'
    - BRMO_LOADER_ITEST="true"

addons:
  apt:
    packages:
      - xmlstarlet
      - graphviz

jobs:
  fast_finish: true
  allow_failures:
    # vanwege build timeout (soms)
    # - name: "MS SQL server 2019"
  include:
      # https://www.postgresql.org/support/versioning/
    - name: "PostgreSQL 9.6 (oudste)"
      env: POSTGRESQL_VERSION="9.6" POSTGIS_VERSION="2.5" PROFILE="postgresql" MVN_ARGS="-Dtest.persistence.unit=brmo.persistence.postgresql"
      jdk: openjdk8
      dist: xenial
    - name: "database upgrades"
      jdk: openjdk8
      env: POSTGRESQL_VERSION="11" POSTGIS_VERSION="2.5" PROFILE="postgresql" MVN_ARGS="-Ddatabase.upgrade=true -Dit.test=!TopNLIntegrationTest"
    - name: "TopNL tests"
      jdk: openjdk8
      env: POSTGRESQL_VERSION="11" POSTGIS_VERSION="2.5" PROFILE="postgresql" MVN_ARGS="-Dit.test=TopNLIntegrationTest"
    - name: "MS SQL server 2017"
      jdk: openjdk8
      dist: xenial
      env: MSSQL_VERSION="2017" POSTGRESQL_VERSION="" POSTGIS_VERSION="" PROFILE="mssql" MVN_ARGS="-Dmssql.instancename='' -Dtest.persistence.unit=brmo.persistence.microsoftsqlserver -Dit.test=!TopNLIntegrationTest" BRMO_LOADER_ITEST="false"
    - name: "MS SQL server 2017 brmo-loader"
      jdk: openjdk8
      dist: xenial
      env: MSSQL_VERSION="2017" POSTGRESQL_VERSION="" POSTGIS_VERSION="" PROFILE="mssql" MVN_ARGS="-Dmssql.instancename='' -Dit.test=!TopNLIntegrationTest"
    - name: "MS SQL server 2019"
      jdk: openjdk11
      dist: bionic
      env: MSSQL_VERSION="2019" POSTGRESQL_VERSION="" POSTGIS_VERSION="" PROFILE="mssql" MVN_ARGS="-Dmssql.instancename='' -Dtest.persistence.unit=brmo.persistence.microsoftsqlserver -Dit.test=!TopNLIntegrationTest" BRMO_LOADER_ITEST="false"
    - name: "JavaDoc"
      jdk: openjdk8
      env: PROFILE="default"

cache:
  directories:
  - $HOME/.m2
  - $HOME/downloads
  - .git/lfs

git:
  lfs_skip_smudge: true

# before_cache:

before_install:
  - git lfs pull
  # installeer een up-2-date Maven versie
  - wget -nc https://www-eu.apache.org/dist/maven/maven-3/$MVN_VERSION/binaries/apache-maven-$MVN_VERSION-bin.zip -P $HOME/downloads/
  - unzip -qq $HOME/downloads/apache-maven-$MVN_VERSION-bin.zip
  - export M2_HOME=$PWD/apache-maven-$MVN_VERSION
  - export PATH=$M2_HOME/bin:$PATH
  - mvn -v
  - export PAGER=cat
  - sudo service postgresql stop
  # installeer postgresql of mssql
  - if [ "$PROFILE" == "postgresql" ]; then
       sudo apt-get --purge remove postgresql* -y;
       sudo rm -rf /etc/postgresql/;
       sudo rm /etc/init.d/postgresql;
       sudo rm /lib/systemd/system/postgresql.service;
       sudo apt-get install curl ca-certificates gnupg;
       curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -;
       sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list';
       sudo apt-get update;
       sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-common;
       sudo apt-get install -y --allow-unauthenticated postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION-scripts postgis;
       sudo pg_dropcluster --stop $POSTGRESQL_VERSION main;
       sudo rm -rf /etc/postgresql/$POSTGRESQL_VERSION /var/lib/postgresql/$POSTGRESQL_VERSION;
       sudo pg_createcluster -u postgres $POSTGRESQL_VERSION main -- --auth-local trust --auth-host password;
       sudo /etc/init.d/postgresql start $POSTGRESQL_VERSION || sudo journalctl -xe;
       sh ".travis/install-pgsql.sh";       
    elif [ "$PROFILE" == "mssql" ]; then
        if [ "$MSSQL_VERSION" == "2019" ]; then
          sh ".travis/install-mssql2019.sh";
        else
          sh ".travis/install-mssql.sh";
        fi
    fi
  # ophalen vorige release zodat we schema van die versie kunnen aanmaken
  - if  [ "$TRAVIS_JOB_NAME" == "database upgrades" ]; then
       sh ".travis/getlastRelease.sh";
    fi
  # ophalen actuele topnl test data alleen voor postgresql
  - if  [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "database upgrades" ]; then
       bash ".jenkins/data-prepare-topnl.sh";
    fi
  - unset _JAVA_OPTIONS
  - ulimit -a
  - free -h

install:
  # installeer dependencies + artifacts en maak DB scripts, zonder iets te testen
  - travis_wait 20 mvn install -Dmaven.test.skip=true -Dtest.onlyITs= -B -V -fae -Pstandard-with-extra-repos,$PROFILE
  - projectversion=$(grep "<version>.*<.version>" -m1 pom.xml | sed -e "s/^.*<version/<version/" | cut -f2 -d">"| cut -f1 -d"<")
  - echo $projectversion
  - export PROJECTVERSION=$projectversion
  - sed -i s/\${project.version}/$projectversion/g ./brmo-persistence/db/create-brmo-persistence-postgresql.sql
  - sed -i s/\${project.version}/$projectversion/g ./brmo-persistence/db/create-brmo-persistence-sqlserver.sql

before_script:
  # opzetten van database schema's
  # dit dient na afloop van de 'install' gedaan te worden omdat (een deel van) de sql gegenereerd wordt
  - ls -l ./brmo-persistence/db/*.sql
  - ls -l ./datamodel/generated_scripts/*.sql
  - ls -l ./topparser/src/main/resources/nl/b3p/topnl/database/*.sql
  - find ./bgt-gml-loader/target/generated-resources/ddl/ -name '*.sql' -print
  - if [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "database upgrades" ]; then
       sh ".travis/setup-pgsql.sh";
    elif [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" == "database upgrades" ]; then
       sh ".travis/setup-old-pgsql.sh";
    elif [ "$PROFILE" == "mssql" ]; then
       sh ".travis/setup-mssql.sh";
    fi

script:
  # run unit tests voor alle modules
  # datamodel is een pom module die heeft geen test phase
  - if [ "$TRAVIS_JOB_NAME" != "database upgrades" ] && [ "$BRMO_LOADER_ITEST" != "true" ]; then
       travis_wait 20 mvn --settings .travis/settings.xml -e test -B -Pstandard-with-extra-repos,$PROFILE -pl '!brmo-dist' -Dtest.onlyITs=false $MVN_ARGS;
       mvn resources:testResources compiler:testCompile surefire:test -P$PROFILE -pl datamodel -Dtest='!*UpgradeTest,!P8*';
    fi
  # test upgrade script voor postgresql
  - if  [ "$TRAVIS_JOB_NAME" == "database upgrades" ]; then
        .travis/execute-upgrades-pgsql.sh staging;
        .travis/execute-upgrades-pgsql.sh rsgb;
        .travis/execute-upgrade-extras-pgsql.sh rsgb;
        .travis/execute-upgrades-pgsql.sh rsgbbgt;
        mvn -e -B -P$PROFILE $MVN_ARGS -pl 'datamodel' resources:testResources compiler:testCompile surefire:test -Dtest='*UpgradeTest';
    fi
  #
  # run integratie tests voor brmo-loader module of alleen topnl, afhankelijk van $MVN_ARGS
  - if [ "$BRMO_LOADER_ITEST" == "true" ]; then
        printf %'s\n\n' 'start integratie tests voor brmo-loader module';
        travis_wait 40 mvn -e verify -B -P$PROFILE $MVN_ARGS -Dtest.onlyITs=true -pl 'brmo-loader';
    fi
  #
  # run integratie tests voor brmo-service module
  - if [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "TopNL tests" ]; then
        printf %'s\n\n'  'start integratie tests voor brmo-service module';
        mvn -e verify -B -P$PROFILE $MVN_ARGS -Dtest.onlyITs=true -pl 'brmo-service';
    fi
  #
  # andere modules alleen tegen pgsql testen want dat kost te veel tijd op dit systeem
  #  er draait ook nog een windows server met mssql versie ergens
  #
  # run integratie tests voor bgt-gml-loader module
  - if [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "TopNL tests" ]; then
        printf %'s\n\n' 'start integratie tests voor bgt-gml-loader module';
        mvn -e verify -B -P$PROFILE $MVN_ARGS -Dtest.onlyITs=true -pl 'bgt-gml-loader';
    fi
  # run integratie tests voor brmo-soap module
  - if [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "TopNL tests" ]; then
        printf %'s\n\n' 'start integratie tests voor brmo-soap module';
        mvn -e verify -B -P$PROFILE $MVN_ARGS -Dtest.onlyITs=true -pl 'brmo-soap';
    fi
  # run integratie tests voor brmo-stufbg204 module
  - if [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "TopNL tests" ]; then
        printf %'s\n\n' 'start integratie tests voor brmo-stufbg204 module';
        mvn -e verify -B -P$PROFILE $MVN_ARGS -Dtest.onlyITs=true -pl 'brmo-stufbg204';
    fi
  # run integratie tests voor brmo-commandline module
  - if [ "$PROFILE" == "postgresql" ] && [ "$TRAVIS_JOB_NAME" != "TopNL tests" ]; then
        printf %'s\n\n' 'start integratie tests voor brmo-commandline module';
        mvn -e verify -B -P$PROFILE $MVN_ARGS -Dtest.onlyITs=true -pl 'brmo-commandline';
    fi
  # test of de javadoc compliant is met java-8 strict checks, noodzakelijk voor succesvolle release
  - if [ "$TRAVIS_JOB_NAME" == "JavaDoc" ]; then
        printf %'s\n\n' 'Javadoc checks';
        travis_wait 30 mvn javadoc:javadoc;
    fi
  - if [ "$TRAVIS_JOB_NAME" == "JavaDoc" ]; then
        printf %'s\n\n' 'Test Javadoc checks';
        travis_wait 30 mvn javadoc:test-javadoc;
    fi

after_script:
  # deploy maven site van master branch test succes
  - if [ "$TRAVIS_JOB_NAME" == "JavaDoc" ] && [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_TEST_RESULT" == 0 ]; then
        travis_wait 30 mvn -B -e -T1 site site:stage --settings .travis/settings.xml;
    fi

#before_deploy:
#
#deploy:
#  provider: pages
#  skip_cleanup: true
#  cleanup: false
#  # https://docs.travis-ci.com/user/deployment/pages/
#  # Set in the settings page of your repository, as a secure variable
#  github_token: $GITHUB_TOKEN
#  keep_history: false
#  allow_empty_commit: false
#  verbose: true
#  local_dir: target/staging
#  on:
#    branch: master

#after_deploy:

after_success:
  - bash <(curl -s https://codecov.io/bash) -f */jacoco.xml || echo 'Codecov failed to upload'

#after_failure:
