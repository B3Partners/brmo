# group: edge
dist: trusty
language: java

sudo: required

addons:
   postgresql: "9.4"

jdk:
#  - openjdk7
  - oraclejdk7
#  - oraclejdk8

matrix:
  fast_finish: true

cache:
  directories:
  - $HOME/.m2

before_install:
  # installeer up-2-date Maven versie
  - wget https://archive.apache.org/dist/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.zip
  - unzip -qq apache-maven-3.3.3-bin.zip
  - export M2_HOME=$PWD/apache-maven-3.3.3
  - export PATH=$M2_HOME/bin:$PATH
  # installeer/update postgis 2.2 op 9.5  
  - sudo service postgresql stop
  - sudo -E apt-get -yq update &>> ~/apt-get-update.log
  - sudo apt-get -y install postgis
  # - sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install postgresql-9.5 postgresql-9.5-postgis-2.2 postgresql-contrib-9.5
  #- sudo -E apt-get -yq --force-yes install postgresql-9.5 postgresql-9.5-postgis-2.2 postgresql-contrib-9.5
  - sudo cp /etc/postgresql/9.4/main/pg_hba.conf /etc/postgresql/9.5/main/pg_hba.conf
  - sudo service postgresql start 9.5
  #- sudo -u postgres createuser -s -p 5432 travis &>/dev/null
  #- sudo -u postgres createdb -O travis -p 5432 travis &>/dev/null
  #- sudo -u postgres createuser -s -p 5433 travis &>/dev/null
  #- sudo -u postgres createdb -O travis -p 5433 travis &>/dev/null

#  - export PGHOST=localhost
#  - export PGPORT=5433
# set up STAGING db
  - psql --version
  - psql -U postgres -a -c "SELECT version();"
  - psql -U postgres -a -c "CREATE ROLE staging LOGIN PASSWORD 'staging' SUPERUSER CREATEDB;"
  - psql -U postgres -a -c "CREATE ROLE rsgb LOGIN PASSWORD 'rsgb' SUPERUSER CREATEDB;"
  - psql -U postgres -c 'create database staging;'
  - psql -U postgres -c 'create database rsgb;'
  - psql -U postgres -d rsgb -c 'create extension postgis;'
  - psql -U postgres -d rsgb -c 'SELECT PostGIS_full_version();'
  - ls -l ./datamodel/generated_scripts/
# bgt auto-schema
  - psql -U postgres -d rsgb -c "CREATE SCHEMA bgttest AUTHORIZATION rsgb;"
  - psql -U postgres -d rsgb -c "GRANT ALL ON SCHEMA bgttest TO public;"
# set up RSGB db
  - travis_wait psql -U postgres -w -q -d rsgb -f ./datamodel/generated_scripts/datamodel_postgresql.sql
  - ls -l ./datamodel/utility_scripts/postgresql/
#  - travis_wait psql -U postgres -w -d rsgb -f ./datamodel/utility_scripts/postgresql/111a_update_gemeente_geom.sql
#  - travis_wait psql -U postgres -w -d rsgb -f ./datamodel/utility_scripts/postgresql/113a_update_wijk_geom.sql

install:
  # install all dependencies + artifacts without any testing, create staging db scripts
  - mvn install -Dmaven.test.skip=true -B -V -fae -q -Ppostgresql -pl '!brmo-dist'

before_script:
# dit dient na afloop van de 'install' gedaan te worden omdat de staging DB sql gegenereerd wordt door Hibernate
  - ls -l ./brmo-persistence/target/ddlscripts/
  - psql -U postgres -d staging -f ./brmo-persistence/target/ddlscripts/create-brmo-persistence-postgresql.sql
  - ls -l ./brmo-persistence/db/
  - psql -U postgres -d staging -f ./brmo-persistence/db/01_create_indexes.sql
  - psql -U postgres -d staging -f ./brmo-persistence/db/02_insert_default_user.sql
# bgt test tabellen
  - psql "dbname=rsgb options=--search_path=bgttest,public" -U postgres -w -q -f ./bgt-gml-loader/target/generated-resources/ddl/postgresql/create_rsgb_bgt.sql

# run tests
script:
# run unit tests
  - mvn -e test -B -Ppostgresql -pl '!brmo-dist'
# run integration tests
  - mvn -e verify -B -Ppostgresql -pl '!brmo-dist'

# after_success:

# after_failure:

# after_script:

# notifications:
#   email: false
  #  on_success: [always|never|change] # default: change
  #  on_failure: [always|never|change] # default: always
